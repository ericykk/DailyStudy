<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:redis="http://www.springframework.org/schema/redis" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                            http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis-1.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"></property>
        <property name="port" value="${redis.port}"></property>
        <property name="usePool" value="true"></property>
    </bean>

    <!--消息对象序列化-->
    <bean id="jdkSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="redisConnectionFactory"></property>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer" ref="jdkSerializer"/>
    </bean>

    <!--监听器类-->
    <bean id="smsMessageDelegateListener" class="com.eric.daily.cache.redis.message.MessageDelegateListener" />

    <!--发送消息监听器-->
    <bean id="smsMessageListener" class="org.springframework.data.redis.listener.adapter.MessageListenerAdapter">
        <property name="delegate" ref="smsMessageDelegateListener" />
        <property name="serializer" ref="jdkSerializer" />
    </bean>

    <!--消息发送者-->
    <bean id="sendMessage" class="com.eric.daily.cache.redis.message.SendMessage">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean>

    <!--配置监听器-->
    <redis:listener-container>
        <!-- topic代表监听的频道，是一个正规匹配  其实就是你要订阅的频道-->
        <redis:listener ref="smsMessageListener" method="handleMessage" serializer="jdkSerializer" topic="sms_queue_web_online" />
    </redis:listener-container>


    <!-- redis连接池配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 最大能够闲置状态的对象数  -->
        <property name="maxIdle" value="${redis.maxIdle}" />
        <!-- 最大分配的对象数 -->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <property name="
        " value="${redis.maxWaitMillis}"/>
        <!-- 当调用borrow Object方法时，是否进行有效性检查 -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>

    <!--单个redis配置start-->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <constructor-arg index="1" value="${redis.host}" />
        <constructor-arg index="2" value="${redis.port}" type="int" />
    </bean>
    <!--单个redis配置end-->

    <!--分布式redis配置start-->
    <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool" scope="singleton">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1">
            <list>
                <bean id="master" class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis.host}"/>
                    <constructor-arg name="port" value="${redis.port}"/>
                    <constructor-arg name="timeout" value="${redis.timeout}"/>
                </bean>
                <bean id="slaveOne" class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis.host}"/>
                    <constructor-arg name="port" value="${redis.port1}"/>
                    <constructor-arg name="timeout" value="${redis.timeout}"/>
                </bean>
                <bean id="slaveTwo" class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis.host}"/>
                    <constructor-arg name="port" value="${redis.port2}"/>
                    <constructor-arg name="timeout" value="${redis.timeout}"/>
                </bean>
                <bean id="slaveThree" class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis.host}"/>
                    <constructor-arg name="port" value="${redis.port3}"/>
                    <constructor-arg name="timeout" value="${redis.timeout}"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>
    <!--分布式redis配置end-->

    <!--redis缓存拦截器配置start-->
    <bean id="methodCacheInterceptor" class="com.eric.daily.cache.redis.interceptor.MethodCacheInterceptor"/>
    <aop:config>
        <!--切入点 这里表示定义在redis.controller包下的任意方法的执行-->
        <aop:pointcut id="methodPoint" expression="execution(* com.eric.daily.cache.redis.controller.*.*(..))"/>
        <!--使用缓存拦截器-->
        <aop:advisor advice-ref="methodCacheInterceptor" pointcut-ref="methodPoint"/>
    </aop:config>
    <!--redis缓存拦截器配置end-->

</beans>